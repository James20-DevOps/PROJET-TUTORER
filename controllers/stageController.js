// controllers/stageController.js
const Stage = require('../models/Stage');
const Application = require('../models/Application');
const Offer = require('../models/Offer');
const Etudiant = require('../models/Student');

// ‚úÖ Cr√©er un stage √† partir d'une candidature accept√©e (entreprise ou √©tablissement)
exports.createStage = async (req, res) => {
  try {
    const { applicationId, dateDebut, dateFin, tuteurEntreprise, tuteurEtablissement } = req.body;

    const application = await Application.findById(applicationId).populate('offreId');
    if (!application) return res.status(404).json({ error: 'Candidature non trouv√©e.' });

    // V√©rifier que la candidature est accept√©e
    if (application.statut !== 'accept√©e') {
      return res.status(400).json({ error: 'La candidature doit √™tre accept√©e pour cr√©er un stage.' });
    }

    // V√©rifier que l'utilisateur a le droit (entreprise ou √©tablissement)
    if (
      req.user.role === 'entreprise' &&
      application.offreId.entrepriseId.toString() !== req.user.id
    ) {
      return res.status(403).json({ error: 'Acc√®s refus√©.' });
    }

    // V√©rifier que le stage n'existe pas d√©j√†
    const existingStage = await Stage.findOne({ candidatureId: applicationId });
    if (existingStage) {
      return res.status(400).json({ error: 'Un stage existe d√©j√† pour cette candidature.' });
    }

    const stage = new Stage({
      candidatureId: applicationId,
      dateDebut,
      dateFin,
      tuteurEntreprise,
      tuteurEtablissement,
      conventionUrl: req.body.conventionUrl, // URL du fichier upload√©
      rapportStageUrl: req.body.rapportStageUrl || null,
      statut: 'en cours'
    });

    await stage.save();

    // Mettre √† jour le statut du stage dans la candidature si besoin
    res.status(201).json({
      message: 'Stage cr√©√© avec succ√®s.',
      stage: await stage.populate('candidatureId')
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìÑ T√©l√©verser une convention de stage (√©tudiant ou √©tablissement)
exports.uploadConvention = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'Aucun fichier upload√©.' });
    }

    const stageId = req.params.stageId;
    const stage = await Stage.findById(stageId);

    if (!stage) return res.status(404).json({ error: 'Stage non trouv√©.' });

    // Ici tu peux ajouter une v√©rification de r√¥le (√©tudiant ou √©tablissement)
    stage.conventionUrl = `/uploads/${req.file.filename}`;
    await stage.save();

    res.json({
      message: 'Convention upload√©e et li√©e au stage.',
      conventionUrl: stage.conventionUrl
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìä Voir les stages d‚Äôun √©tudiant (√©tudiant ou √©tablissement)
exports.getStudentStages = async (req, res) => {
  try {
    const userId = req.user.id;
    let stages;

    if (req.user.role === 'etudiant') {
      const student = await Etudiant.findOne({ _id: userId });
      stages = await Stage.find({ 'candidatureId.etudiantId': student._id })
        .populate('candidatureId', 'offreId')
        .populate('offreId', 'titre entrepriseId');
    } else if (req.user.role === 'etablissement') {
      // L'√©tablissement voit tous les stages de ses √©tudiants
      stages = await Stage.find()
        .populate('candidatureId')
        .populate('offreId');
    } else {
      return res.status(403).json({ error: 'Acc√®s refus√©.' });
    }

    res.json(stages);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};